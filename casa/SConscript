import os, glob

# import root environment
Import( ["buildenv", "installer"])
myenv = buildenv.Clone()

# get all the sourcefiles
#cpps = myenv.Glob("*.cc")
cpps = myenv.SGlob("*.cc", excludedirs=["test"], recursive=True )

# need this to go to the root dir, as SConsript asumes to be in the
# build dir
libname = "casa_casa"

if not myenv.GetOption("disable_static"):
    slib =  myenv.StaticLibrary(target = libname, source = [cpps])
    myenv.Alias('casa', slib)

if myenv.GetOption("enable_shared"):
    dlib =  myenv.SharedLibrary(target = libname, source = [cpps])
    myenv.Alias('casa', slib)

myenv.Default('casa')

testenv = myenv.Clone()
testenv.PrependUnique(LIBPATH=[os.path.join(str(myenv["BUILDDIR"]), "casa")])
# gather test files
# SGlob works in build dir, so only for cc files
tests = testenv.SGlob("test/*.cc")
tests += testenv.SGlob("*/test/*.cc")
# point to tests local includes
testenv.PrependUnique(LIBPATH=[testenv["BUILDDIR"]])
# allow either linking against shared or static, static if both present
testenv.PrependUnique(LIBS=libname)
for t in tests:
    testenv.addAssayTest(t)

rootdir = myenv.Dir("#").abspath
# install headers, only works with absolute dir.
installer.AddHeaders( rootdir+"/casa", "*.h", "casacore/casa/", True )
installer.AddHeaders( rootdir+"/casa", "*.tcc", "casacore/casa/", True )
